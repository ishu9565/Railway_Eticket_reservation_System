//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientWebApp.RouteServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Route", Namespace="http://schemas.datacontract.org/2004/07/RailwayE_TicketReservationSystem")]
    [System.SerializableAttribute()]
    public partial class Route : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string eTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string fromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int priceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid routeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string sTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string toField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid trainIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string eTime {
            get {
                return this.eTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.eTimeField, value) != true)) {
                    this.eTimeField = value;
                    this.RaisePropertyChanged("eTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string from {
            get {
                return this.fromField;
            }
            set {
                if ((object.ReferenceEquals(this.fromField, value) != true)) {
                    this.fromField = value;
                    this.RaisePropertyChanged("from");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int price {
            get {
                return this.priceField;
            }
            set {
                if ((this.priceField.Equals(value) != true)) {
                    this.priceField = value;
                    this.RaisePropertyChanged("price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid routeId {
            get {
                return this.routeIdField;
            }
            set {
                if ((this.routeIdField.Equals(value) != true)) {
                    this.routeIdField = value;
                    this.RaisePropertyChanged("routeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string sTime {
            get {
                return this.sTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.sTimeField, value) != true)) {
                    this.sTimeField = value;
                    this.RaisePropertyChanged("sTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string to {
            get {
                return this.toField;
            }
            set {
                if ((object.ReferenceEquals(this.toField, value) != true)) {
                    this.toField = value;
                    this.RaisePropertyChanged("to");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid trainId {
            get {
                return this.trainIdField;
            }
            set {
                if ((this.trainIdField.Equals(value) != true)) {
                    this.trainIdField = value;
                    this.RaisePropertyChanged("trainId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RouteServiceReference.IRouteService")]
    public interface IRouteService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouteService/AddRoute", ReplyAction="http://tempuri.org/IRouteService/AddRouteResponse")]
        bool AddRoute(ClientWebApp.RouteServiceReference.Route route);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouteService/AddRoute", ReplyAction="http://tempuri.org/IRouteService/AddRouteResponse")]
        System.Threading.Tasks.Task<bool> AddRouteAsync(ClientWebApp.RouteServiceReference.Route route);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouteService/GetRoutes", ReplyAction="http://tempuri.org/IRouteService/GetRoutesResponse")]
        ClientWebApp.RouteServiceReference.Route[] GetRoutes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRouteService/GetRoutes", ReplyAction="http://tempuri.org/IRouteService/GetRoutesResponse")]
        System.Threading.Tasks.Task<ClientWebApp.RouteServiceReference.Route[]> GetRoutesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRouteServiceChannel : ClientWebApp.RouteServiceReference.IRouteService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RouteServiceClient : System.ServiceModel.ClientBase<ClientWebApp.RouteServiceReference.IRouteService>, ClientWebApp.RouteServiceReference.IRouteService {
        
        public RouteServiceClient() {
        }
        
        public RouteServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RouteServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RouteServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RouteServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AddRoute(ClientWebApp.RouteServiceReference.Route route) {
            return base.Channel.AddRoute(route);
        }
        
        public System.Threading.Tasks.Task<bool> AddRouteAsync(ClientWebApp.RouteServiceReference.Route route) {
            return base.Channel.AddRouteAsync(route);
        }
        
        public ClientWebApp.RouteServiceReference.Route[] GetRoutes() {
            return base.Channel.GetRoutes();
        }
        
        public System.Threading.Tasks.Task<ClientWebApp.RouteServiceReference.Route[]> GetRoutesAsync() {
            return base.Channel.GetRoutesAsync();
        }
    }
}
